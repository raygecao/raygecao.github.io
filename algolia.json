[{"categories":["探索与实战"],"content":"诸多巧合凑在一起就是完美的偏差 ","date":"2021-07-11","objectID":"/posts/minikube-tls/:0:0","tags":["k8s","tls"],"title":"Minikube中的TLS认证探秘","uri":"/posts/minikube-tls/"},{"categories":["探索与实战"],"content":"缘起 对TLS的认知最初应该在学习计算机网络中的https协议，该协议通过TLS层对传输数据进行加密解密。为了防止中间人攻击，需要第三方证书机构进行认证，认证的方式是通过数字签名。基本上这几点就涵盖了所有的考纲内容。然而当我在学习或者在工作中真的遇到TLS引起的认证问题时，我发现我所理解的十分笼统，无法给我提供任何有价值的排查思路，因此准备稍微深挖一下TLS的认证机制。 可是载体为什么是minikube？最近在跟随大佬熟悉一些operator相关的机制，在开始前搭了一套minikube环境，想着能有更好的开发体验，打算在本地去连服务器的minikube集群，后面有机会再去研究一下telepresence以便在本地调试。连接服务器的k8s集群相关的文档也有很多，核心的解决方案就是将minikube集群中的kubeconfig及对应的证书文件拷贝到本机。顺着这个思路一顿操作猛如虎，结果在使用kubectl获取资源时，出现了x509证书认证错误。 kubectl get pods Unable to connect to the server: x509: certificate signed by unknown authority (possibly because of “crypto/rsa: verification error” while trying to verify candidate authority certificate “minikubeCA”) 在google没有找到合适的诱因及解决方案，因此打算自己探秘一番。有关TLS认证，x509证书以及openssl相关的命令我会记录在另一篇文章中，本文主要记录k8s的TLS双向认证的过程。 ","date":"2021-07-11","objectID":"/posts/minikube-tls/:1:0","tags":["k8s","tls"],"title":"Minikube中的TLS认证探秘","uri":"/posts/minikube-tls/"},{"categories":["探索与实战"],"content":"初识 k8s在权限管理上做的格外细致，尤其是在k8s api的访问上，更是细分为认证、鉴权和准入等阶段。我们这里只对tls双向认证做粗略的描述。 什么是双向认证呢？简单来说就是服务器需要验明客户端的身份，同时客户端也需要验明服务器的身份。k8s的认证载体为x509证书。在minikube集群中有一个统一的CA（默认路径为.minikube/ca.crt）来对证书进行验签。 双向认证发生在任何两个进行通信的组件中，下面列举一些例子： etcd集群内peer间通信是双向的，etcd peer既充当客户端，又充当服务端。因此既需要持有客户端证书，又需要持有服务端证书进行认证。 kube-apiserver与etcd之间的通信是单向的，kube-apiserver充当客户端，etcd充当服务端。因此kube-apiserver需持有客户端证书，etcd需持有服务端证书。 kubectl与apiserver的通信是单向的，kubectl充当客户端，etcd充当服务端，kubectl需要持有客户端证书，apiserver需要持有服务端证书。 …… 每个控制面组件在启动时会指定所使用到的证书，下例列举出apiserver的启动参数 # 获取kube-apiserver 相关配置 $ kubectl get pods/kube-apiserver-minikube -o yaml --namespace kube-system spec: containers: - command: - kube-apiserver - --advertise-address=172.17.0.40 - ...... # 用于验证访问apiserver客户端证书的CA根证书 - --client-ca-file=/var/lib/minikube/certs/ca.crt - .... # 与客户端通信的服务端证书即私钥 - --tls-cert-file=/var/lib/minikube/certs/apiserver.crt - --tls-private-key-file=/var/lib/minikube/certs/apiserver.key # 用于验证服务器证书的CA根证书 - --etcd-cafile=/var/lib/minikube/certs/etcd/ca.crt # 用于访问etcd的客户端证书 - --etcd-certfile=/var/lib/minikube/certs/apiserver-etcd-client.crt # 与etcd通信使用的私钥 - --etcd-keyfile=/var/lib/minikube/certs/apiserver-etcd-client.key # kubelet相关证书及私钥 - --kubelet-client-certificate=/var/lib/minikube/certs/apiserver-kubelet-client.crt - --kubelet-client-key=/var/lib/minikube/certs/apiserver-kubelet-client.key # kube-proxy相关证书及私钥 - --proxy-client-cert-file=/var/lib/minikube/certs/front-proxy-client.crt - --proxy-client-key-file=/var/lib/minikube/certs/front-proxy-client.key - --requestheader-client-ca-file=/var/lib/minikube/certs/front-proxy-ca.crt - .... 从上面不难看出，对于一条通信链路的服务端和客户端，都需要提供一个证书，一个私钥，和一个验证对端证书的CA根证书。 再来看看我们的kubeconfig，里面有kubectl的客户端证书及秘钥，以及验证apiserver服务端证书的CA根证书。 $ kubectl config view apiVersion: v1 clusters: - cluster: # 用于验证apiserver服务端证书的根证书 certificate-authority: $HOME/.minikube/ca.crt server: https://172.17.0.40:8443 name: minikube contexts: - context: cluster: minikube user: minikube name: minikube current-context: minikube kind: Config preferences: {} users: - name: minikube user: # kubectl持有的客户端证书及私钥 client-certificate: $HOME/.minikube/profiles/minikube/client.crt client-key: $HOME/.minikube/profiles/minikube/client.key ","date":"2021-07-11","objectID":"/posts/minikube-tls/:2:0","tags":["k8s","tls"],"title":"Minikube中的TLS认证探秘","uri":"/posts/minikube-tls/"},{"categories":["探索与实战"],"content":"寻幽 下面我们来验证一下kubectl与apiserver的证书及双向认证。 从上一节可以推断出kubectl中CA $HOME/.minikube/ca.crt可以验证apiserver的服务端证书 /var/lib/minikube/certs/apiserver.crt，apiserver的CA /var/lib/minikube/certs/ca.crt 可以验证kubectl的客户端证书$HOME/.minikube/profiles/minikube/client.crt，验证结果如下： # 服务端证书验证 $ openssl verify -CAfile ~/.minikube/ca.crt /var/lib/minikube/certs/apiserver.crt /var/lib/minikube/certs/apiserver.crt: O = system:masters, CN = minikube error 7 at 0 depth lookup:certificate signature failure 139668477843096:error:0407006A:rsa routines:RSA_padding_check_PKCS1_type_1:block type is not 01:rsa_pk1.c:103: 139668477843096:error:04067072:rsa routines:RSA_EAY_PUBLIC_DECRYPT:padding check failed:rsa_eay.c:705: 139668477843096:error:0D0C5006:asn1 encoding routines:ASN1_item_verify:EVP lib:a_verify.c:218: # 客户端证书验证 $ openssl verify -CAfile /var/lib/minikube/certs/ca.cr ~/.minikube/profiles/minikube/client.crt $HOME/minikube/profiles/minikube/client.crt: O = system:masters, CN = minikube-user error 7 at 0 depth lookup:certificate signature failure 139864367138456:error:0407006A:rsa routines:RSA_padding_check_PKCS1_type_1:block type is not 01:rsa_pk1.c:103: 139864367138456:error:04067072:rsa routines:RSA_EAY_PUBLIC_DECRYPT:padding check failed:rsa_eay.c:705: 139864367138456:error:0D0C5006:asn1 encoding routines:ASN1_item_verify:EVP lib:a_verify.c:218: 双方验证均未通过，难道是根证书有问题？ # 查看apiserver客户端证书 $ openssl x509 -text -in /var/lib/minikube/certs/apiserver.crt -noout Certificate: Data: Version: 3 (0x2) Serial Number: 2 (0x2) Signature Algorithm: sha256WithRSAEncryption Issuer: CN=minikubeCA Validity Not Before: Aug 8 09:07:42 2020 GMT Not After : Aug 9 09:07:42 2021 GMT Subject: O=system:masters, CN=minikube Subject Public Key Info: ...... X509v3 extensions: X509v3 Key Usage: critical Digital Signature, Key Encipherment X509v3 Extended Key Usage: TLS Web Server Authentication, TLS Web Client Authentication X509v3 Basic Constraints: critical CA:FALSE X509v3 Subject Alternative Name: ...... ...... # 查看kubectl ca根证书 $ openssl x509 -text -in /var/lib/minikube/certs/ca.crt -noout Certificate: Data: Version: 3 (0x2) Serial Number: 1 (0x1) Signature Algorithm: sha256WithRSAEncryption Issuer: CN=minikubeCA Validity Not Before: Aug 8 09:07:41 2020 GMT Not After : Aug 7 09:07:41 2030 GMT Subject: CN=minikubeCA ...... apiserver服务端证书和kubectl的CA证书输出也符合预期，前者的Issuer与后者的Subject相同，说明前者的证书是后者颁发的；后者Issuer与Subject相同，说明其是一个合法的自签名证书。 我是谁，我在哪… 明明服务器上kubectl可以访问到apiserver，证书的颁发关系也没问题，而且TLS双向认证原理也是无懈可击，为什么openssl证书验证就是有问题的呢？ ","date":"2021-07-11","objectID":"/posts/minikube-tls/:3:0","tags":["k8s","tls"],"title":"Minikube中的TLS认证探秘","uri":"/posts/minikube-tls/"},{"categories":["探索与实战"],"content":"溯源 上述结论存在一个致命的错误 Bug 证书A的Issuer与证书B的Subject相同，说明A的证书是B颁发的 这个错误犯得自己都想笑，x509证书中Issuer代表颁发机构，而Subject代表证书所有者，A的Issuer与B的Subject相同，只能说明A的证书颁发机构与B的所有者重名，并不能说明A一定是B颁发的。这就好比小明的妈妈叫小丽，但是叫小丽的不一定是小明的妈妈。证书认证本质上是通过数字签名进行的，签名的私钥是唯一的，但机构名称并不唯一，因此验签失败并不与实际矛盾。 但是事出反常必有妖，叫小丽的可能有很多，但是一个房子里就两个人，并且他们都叫小丽就很不寻常。这就让我开始怀疑环境中是不是有另一套minikubeCA根证书，即存在不止一个minikube？ 在验证kubectl客户端证书的时候留意到~/.minikube的配置目录中也有个apiserver.crt $ tree ~/.minikube minikube ├── addons ├── ca.crt ├── ca.key ├── ca.pem ├── cert.pem ├── certs │ ├── ca-key.pem │ ├── ca.pem │ ├── cert.pem │ └── key.pem ├── config │ └── config.json ├── files ├── key.pem ├── last_update_check ├── logs ├── machines │ ├── minikube │ │ ├── config.json │ │ ├── id_rsa │ │ └── id_rsa.pub │ ├── server-key.pem │ └── server.pem ├── profiles │ └── minikube │ ├── apiserver.crt │ ├── apiserver.crt.49553cf0 │ ├── apiserver.key │ ├── apiserver.key.49553cf0 │ ├── client.crt │ ├── client.key │ ├── config.json │ ├── events.json │ ├── proxy-client.crt │ └── proxy-client.key ├── proxy-client-ca.crt └── proxy-client-ca.key 使用openssl使用Kubectl的服务端验证根证书验证一下这个证书，验证通过。 $ openssl verify -CAfile ~/.minikube/ca.crt ~/.minikube/profiles/minikube/apiserver.crt $HOME/.minikube/profiles/minikube/apiserver.crt: OK 这时候另一个疑惑就涌上来了：为什么kubectl客户端证书和apiserver服务端证书会放在完全不相关的两个目录下？又挖一挖config文件，发现有auth path相关的路径配置。 $ cat ~/.minikube/machines/minikube/config.json { .... { \"AuthOptions\": { \"CertDir\": \"$HOME/.minikube\", \"CaCertPath\": \"$HOME/.minikube/certs/ca.pem\", \"CaPrivateKeyPath\": \"$HOME/.minikube/certs/ca-key.pem\", \"CaCertRemotePath\": \"\", \"ServerCertPath\": \"$HOME/.minikube/machines/server.pem\", \"ServerKeyPath\": \"$HOME/.minikube/machines/server-key.pem\", \"ClientKeyPath\": \"$HOME/.minikube/certs/key.pem\", \"ServerCertRemotePath\": \"\", \"ServerKeyRemotePath\": \"\", \"ClientCertPath\": \"$HOME/.minikube/certs/cert.pem\", \"ServerCertSANs\": null, \"StorePath\": \"$HOME/.minikube\" } } 尽管没看过minikube的源码，也没在官方文档上找到很明确的说法，但是基本上可以确定minikube启动的所有控制面组件使用的证书是在这里配置的，也就是完全存放在~/.minikubepath中。而pod中挂载的/var/lib/minikube/certs应该并非挂是宿主机对应的path上，毕竟minikube是运行在VM中的，挂载路径的灵活性便可想而知。 minikube的定位 Minikube is a tool that makes it easy to run Kubernetes locally. Minikube runs a single-node Kubernetes cluster inside a Virtual Machine (VM) on your laptop for users looking to try out Kubernetes or develop with it day-to-day. ","date":"2021-07-11","objectID":"/posts/minikube-tls/:4:0","tags":["k8s","tls"],"title":"Minikube中的TLS认证探秘","uri":"/posts/minikube-tls/"},{"categories":["探索与实战"],"content":"破疑 接下来的就是之前使我们步入泥淖的两个问题： 在本机执行kubectl为什么会出现x509证书认证失败？ 宿主机上为什么会有/var/lib/minikube/certs一系列证书？ 这两个问题有着很强的相关性，一个大胆的猜想就是本机连的apiserver是在/var/lib/minikube/certs中认证的。 首先来看一下apiserver的配置 # 查看apiserver的配置 $ kubectl get pods/kube-apiserver-minikube -o yaml --namespace kube-system spec: containers: - command: - kube-apiserver - --advertise-address=172.17.0.40 - --secure-port=8443 - --allow-privileged=true - --authorization-mode=Node,RBAC - --client-ca-file=/var/lib/minikube/certs/ca.crt ... podIP: 172.17.0.40 podIPs: - ip: 172.17.0.40 从apiserver的配置中我们可以看到对应的podIP并不是宿主机的ip，而是个虚拟机的ip。这个再结合minikube在虚拟机中运行k8s很容易理解。那么也就是说minikube并没有暴露在宿主机的8443端口。可是我们执行kubectl并不是返回端口connection refused，而是返回的x509认证失败，这也就是宿主机的8443端口被监听。使用ps查看apiserver的进程，结果居然存在2个进程。 这样之前的灵异现象都能串起来了：宿主机还有一个额外的minikube集群，并且对外暴露了宿主机8443端口，使用/var/lib/minikube/certs进行认证。 经过一番查证与折腾，发现在/etc/kubernetes下有一些kubeconfig file以及控制面组件的部署文件。 $ tree /etc/kubernetes /etc/kubernetes ├── addons │ ├── dashboard-clusterrolebinding.yaml │ ├── dashboard-clusterrole.yaml │ ├── dashboard-configmap.yaml │ ├── dashboard-dp.yaml │ ├── dashboard-ns.yaml │ ├── dashboard-rolebinding.yaml │ ├── dashboard-role.yaml │ ├── dashboard-sa.yaml │ ├── dashboard-secret.yaml │ ├── dashboard-svc.yaml │ ├── ingress-configmap.yaml │ ├── ingress-dp.yaml │ ├── ingress-rbac.yaml │ ├── storageclass.yaml │ └── storage-provisioner.yaml ├── admin.conf ├── controller-manager.conf ├── kubelet.conf ├── manifests │ ├── etcd.yaml │ ├── kube-apiserver.yaml │ ├── kube-controller-manager.yaml │ └── kube-scheduler.yaml └── scheduler.conf 然后在服务器上指定kubeconfig为admin.conf执行kubectl，果然结果来自另外的一个集群。这个集群应该是我在最早接触k8s时使用的版本比较低的minikube搭建的，至于为啥部署形态会成这样我也不清楚至今仍然未解。 观察这个Minikube部署的apiserver，的确对外暴露的宿主机的8443端口。 $ sudo KUBECONFIG=/etc/kubernetes/admin.conf kubectl get pods/kube-apiserver-XX --namespace kube-system -o yaml ...... spec: containers: - command: - kube-apiserver - --advertise-address=10.122.101.148 - --secure-port=8443 - --client-ca-file=/var/lib/minikube/certs/ca.crt - --tls-cert-file=/var/lib/minikube/certs/apiserver.crt - --tls-private-key-file=/var/lib/minikube/certs/apiserver.key - ...... ...... podIP: 10.122.101.148 podIPs: - ip: 10.122.101.148 qosClass: Burstable 将admin.conf中的证书与/var/lib/minikube/certs下的证书进行互相验签，均可通过。真相由此浮出水面。 ","date":"2021-07-11","objectID":"/posts/minikube-tls/:5:0","tags":["k8s","tls"],"title":"Minikube中的TLS认证探秘","uri":"/posts/minikube-tls/"},{"categories":["探索与实战"],"content":"前行 知道了问题的症结，需要向最初的目的前进了。先忽视掉上面揪出来的野minikube，尝试连接新搭建的minikube，另一个后续会通过一个额外的context加入到本地多集群管理中。 由于8443端口已经被先前的端口占用了，那么我们就选择暴露一个额外的端口38443吧。 # 首先启动minikube（我在启动前删除了之前部署的minikube数据），指定apiserver的端口为38443，指定apiserver的ip为10.122.101.148 # apiserver 端口其实不必指定，后续会介绍须引入本地端口转发来将服务暴露出去 $ minikube start --apiserver-ips=10.122.101.148 --apiserver-port=38443 # 查看apiserver的配置 $ kubectl get pods/kube-apiserver-minikube -o yaml --namespace kube-system spec: containers: - command: - kube-apiserver - --advertise-address=172.17.0.40 - --allow-privileged=true - --secure-port=38443 - --authorization-mode=Node,RBAC - --client-ca-file=/var/lib/minikube/certs/ca.crt ... podIP: 172.17.0.40 podIPs: - ip: 172.17.0.40 What? 不是设置了apiserver的ip为宿主机的ip了吗？为什么podIP还是虚拟机的ip？文档里还特意的解释了flag apiserver-ips的作用，就是要 make the apiserver available from outside the machine。 $ minikube start --help Starts a local Kubernetes cluster Options: --addons=[]: Enable addons. see `minikube addons list` for a list of valid addon names. --apiserver-ips=[]: A set of apiserver IP Addresses which are used in the generated certificate for kubernetes. This can be used if you want to make the apiserver available from outside the machine --apiserver-name='minikubeCA': The authoritative apiserver hostname for apiserver certificates and connectivity. This can be used if you want to make the apiserver available from outside the machine --apiserver-names=[]: A set of apiserver names which are used in the generated certificate for kubernetes. This can be used if you want to make the apiserver available from outside the machine --apiserver-port=8443: The apiserver listening port ...... apiserver-ips option is not working 这个issue专门描述了此问题，明确指出此参数仅会将对应的ip添加到证书SAN，不会修改apiserver的podIP。当然，作者困惑是否存在这种使用方式的场景。虽然不是很明确这样使用会带来什么样的问题（maybe端口冲突？安全？可扩展性？），但是作为初入坑k8s的同学来讲，这种简单的访问方式可能会降低一些我们的学习门槛。 apiserver-ips option is not working\" apiserver-ips option is not working 既然这样，怎样才能将apiserver可以被本地访问到呢？这个也简单，可以通过ssh本地端口转发进行。 # 将服务器10.122.101.148的38443端口转发到172.17.0.40的38443端口 $ ssh -L 10.122.101.148:38443:172.17.0.40:38443 -N -f 10.122.101.148 最后，只需要将我们的kubeconfig的server字段改成10.122.101.148:38443就可以开心的访问远程的minikube了。 x509证书扩展 将对应ip添加到证书SAN，这个解释我并不是很理解，直到后面做了个实验才有些感觉。在没指定apiserver-ips去curl https://10.122.101.148，会出现诸如Hostname 10.122.101.148 doesn’t match certificate’s altnames: “Host: XXX. is not in the cert’s altnames:XXX的错误，而指定了apiserver-ips=10.122.101.148后，apiserver的服务端证书便可以通过验证。这是因为该参数将ip加入到了服务端证书的SAN扩展字段中，使得10.122.101.148成为证书可信的域。 $ openssl x509 -text -in .minikube/profiles/minikube/apiserver.crt -noout X509v3 extensions: X509v3 Subject Alternative Name: DNS:minikubeCA, DNS:control-plane.minikube.internal, DNS:kubernetes.default.svc.cluster.local, DNS:kubernetes.default.svc, DNS: kubernetes.default, DNS:kubernetes, DNS:localhost, IP Address:10.122.101.148, IP Address:172.17.0.40, IP Address:10.96.0.1, IP Address:127.0.0. 1, IP Address:10.0.0.1 ","date":"2021-07-11","objectID":"/posts/minikube-tls/:6:0","tags":["k8s","tls"],"title":"Minikube中的TLS认证探秘","uri":"/posts/minikube-tls/"},{"categories":["探索与实战"],"content":"插曲 在验证双向认证时，为了避免两端都要使用openssl验证，便想通过curl去验证。使用curl验证的结果让我再次怀疑人生… # 执行双向验证，客户端验证服务端证书失败 $ curl https://10.122.101.148:38443 --cert ~/.minikube/profiles/minikube/client.crt --key ~/.minikube/profiles/minikube/client.key --cacert ~/.minikube/ca.crt curl: (60) server certificate verification failed. CAfile: ~/.minikube/ca.crt CRLfile: none More details here: http://curl.haxx.se/docs/sslcerts.html curl performs SSL certificate verification by default, using a \"bundle\" of Certificate Authority (CA) public keys (CA certs). If the default bundle file isn't adequate, you can specify an alternate file using the --cacert option. If this HTTPS server uses a certificate signed by a CA represented in the bundle, the certificate verification probably failed due to a problem with the certificate (it might be expired, or the name might not match the domain name in the URL). If you'd like to turn off curl's verification of the certificate, use the -k (or --insecure) option. # 关闭客户端的服务端证书验证，正常返回 $ curl https://10.122.101.148:38443 --cert ~/.minikube/profiles/minikube/client.crt --key ~/.minikube/profiles/minikube/client.key -k { \"paths\": [ \"/api\", \"/api/v1\", \"/apis\", \"/apis/\", ... ] } # 确认客户端CA对服务端的证书验证结果，认证通过 openssl verify -CAfile ~/.minikube/ca.crt ~/.minikube/profiles/minikube/apiserver.crt ~/.minikube/profiles/minikube/apiserver.crt: OK 上面的测试结果看上去互相矛盾，折腾了很久，大概查了下curl的文档，感觉自己做的并没有问题，大胆的怀疑一下是curl的版本问题，于是准备在一个curl版本更高的镜像里去执行这个curl命令。 # 在golang:1.16.2镜像中通过curl验证双向认证，成功 $ docker run --rm -v $HOME/.minikube:/minikube golang:1.16.2 curl https://10.122.101.148:38443 --cert /minikube/profiles/minikube/client.crt --key /minikube/profiles/minikube/client.key --cacert /minikube/ca.crt { \"paths\": [ \"/api\", \"/api/v1\", \"/apis\", \"/apis/\", ... ] } 果然是旧版本curl的问题。由于目前为止在这上面浪费了比较久的时间，并且感觉越往后排查越偏离初始方向，因此便未继续往下追溯。二者版本列举如下，希望自己未来有时间、有兴趣去往底层排查一下。 # 服务器10.122.101.148上curl版本 $ curl --version curl 7.47.0 (x86_64-pc-linux-gnu) libcurl/7.47.0 GnuTLS/3.4.10 zlib/1.2.8 libidn/1.32 librtmp/2.3 Protocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtmp rtsp smb smbs smtp smtps telnet tftp Features: AsynchDNS IDN IPv6 Largefile GSS-API Kerberos SPNEGO NTLM NTLM_WB SSL libz TLS-SRP UnixSockets # go:1.16.2 image中curl版本 $ docker run --rm -v $HOME/.minikube:/minikube golang:1.16.2 curl --version curl 7.64.0 (x86_64-pc-linux-gnu) libcurl/7.64.0 OpenSSL/1.1.1d zlib/1.2.11 libidn2/2.0.5 libpsl/0.20.2 (+libidn2/2.0.5) libssh2/1.8.0 nghttp2/1.36.0 librtmp/2.3 Release-Date: 2019-02-06 Protocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtmp rtsp scp sftp smb smbs smtp smtps telnet tftp Features: AsynchDNS IDN IPv6 Largefile GSS-API Kerberos SPNEGO NTLM NTLM_WB SSL libz TLS-SRP HTTP2 UnixSockets HTTPS-proxy PSL ","date":"2021-07-11","objectID":"/posts/minikube-tls/:7:0","tags":["k8s","tls"],"title":"Minikube中的TLS认证探秘","uri":"/posts/minikube-tls/"},{"categories":["探索与实战"],"content":"悟道 你永远不知道你不知道的事，只有学习才会让我们发现原本我们不知道的事，哪怕过程使我们谦(zi)卑。 最初只是想体验一下telepresence，仅仅是一个准备工作就牵出如此多的知识点，遇到问题是痛苦的，但寻找解决问题的方法是快乐的。 与安全相关的问题搞得多复杂都不为过，仅仅是k8s认证阶段中的证书认证这一步就如此的丰富，后面的鉴权、准入等过程会更加刺激。 工具的使用很皮毛，比如curl，openssl，不过比较复杂的工具往往在实际问题排查时仅需要最基本的使用方法。 仍然存在诸多基础知识盲区，比如 ssh端口转发， 数字签名，x509证书相关概念等，后面会有专门的文章来记录这些基础。 好记性不如烂笔头，文章落笔于解决问题的第二天，但是能记住的甚微，写文章时基本又根据history重放了一遍才将脉络重新梳理清楚。 ","date":"2021-07-11","objectID":"/posts/minikube-tls/:8:0","tags":["k8s","tls"],"title":"Minikube中的TLS认证探秘","uri":"/posts/minikube-tls/"},{"categories":["探索与实战"],"content":"启明 远程访问minikube 一文带你彻底厘清 Kubernetes 中的证书工作机制 Installing Kubernetes with Minikube Certificate Signing Requests apiserver-ips option is not working ","date":"2021-07-11","objectID":"/posts/minikube-tls/:9:0","tags":["k8s","tls"],"title":"Minikube中的TLS认证探秘","uri":"/posts/minikube-tls/"},{"categories":["读书笔记"],"content":"参考王爽《汇编语言》 CPU读写外部设备需要如下交互信息（分别对应三大逻辑总线） 地址信息：存储单元的地址。 控制信息：器件的选择，读或写的命令。 数据信息：读或写的数据。 寄存器的作用 CPU可直接读写的部件，可以通过改变寄存器的内容实现对CPU的控制。 寄存器cheat sheet 名称 类型 作用 AX 通用寄存器 用于一般的数据传递 BX 通用寄存器 用于表示偏移地址，如mov ax [bx]将ds:[bx]中的内容送入ax CX 通用寄存器 用于存储循环变量，cx中的值会影响loop指定的执行结果，cx为零时会跳出循环 SI/DI 配合BX指明内存单元的偏址，如[bx+si+idata] SP 存放栈顶的偏移地址 IP 指令指针寄存器，存放代码段的偏址 BP 栈内偏址，主要用于指向/寻找栈内的某个地址的元素 DS 段寄存器 存放数据段的寄存器，配合[addr]做段内寻址 SS 段寄存器 存放栈的段地址，配合SP/BP做段内寻址 CS 段寄存器 存放代码段的寄存器，配合IP做段内寻址 Flag 标志寄存器 用来存储相关指令的某些执行结果，从而为CPU相关指令提供行为依据 标志寄存器标志位 作用 ZF 零标志位，记录指令执行结果是否为0 PF 奇偶标志位，记录相关指令执行后，所有bit位中1的个数是否为偶数 SF 符号标志位，记录相关指令执行后，结果是否为负 CF 进位标志位，在无符号数运算时，记录了运算结果的最高有效位的进位值 OF 溢出标志位，用于标识指令执行结果是否溢出 DF 方向标识位，在串处理指令中，控制每次操作后si, di的增减 TF 调试标志位，TF=1时，表示进入单步执行 IF 中断允许标志位，表示能否接收外部中断请求，为1时能响应外部中断，反之屏蔽 8086CPU是16位机，但却有20位地址总线（1MB的寻址能力），无法做到简单的一一映射，其合成物理地址的方式如下 通过两个地址16位地址合成一个20位地址：物理地址=基址+偏址。 在8086CPU中物理地址合成公式为：物理地址=段地址*16+偏移地址。 内存并没有分段，段的划分来自CPU。 将若干的地址连续的内存单元看做一个段，用段地址*16定位段的基址，用偏移地址定位段中的内存单元。 CPU如何区分出内存中存放的是数据还是指令呢？ 数据和指定在内存中的存储形式是一致的，都是二进制信息 CPU将CS:IP指向的内存单元中的内容看做指令，将DS:[addr]指向的内存单元中的内容看做数据 SS:SP用于指向栈顶元素，需要注意栈顶越界的问题。 内存单元的描述 完整的描述一个内存单元需要两种信息：内存单元的地址和内存单元的长度。 mov ax, [0]：将ds:[0]的内容送入ax中，内存单元的长度为2字节（即一个字单元，因为是送入到ax）中。 move al, [0]：将ds:[0]的内容送入al中，内存单元的长度为1字节（即一个字节单元）。 转移指令：修改CS或IP的指令成为转移指令。只修改IP时称为段内转移（近转移），同时修改CS和IP的指令称为段间转移（远转移）。 无条件转移指令，如jmp。 jmp不需要转移的目的地址，而是通过相对位移来跳转。 条件转移指令。 循环指令，如loop。 过程 call \u0026 ret 中断 CPU在执行完当前正在执行的指令后，检测到从外部或者内部产生的特殊信息（中断信息），便转去处理这个特殊信息 内中断 除法溢出 单步执行（debug） 执行into 执行int指令 外中断 可屏蔽中断 不可屏蔽中断 中断处理程序入口通过中断向量表（中断类型码）来索引到（存储中断程序地址），对于8086而言，中断向量表存储在内存地址0处。中断向量表中，一个表项占两个字节，高字节存放段地址，低字节存放偏移地址 中断过程 从中断信息中获取中断类型码 标志寄存器入栈 设置标志位TF和IF为0 CS内容入栈 IP内容入栈 根据中断类型码定位到中断程序的入口 ","date":"2021-06-27","objectID":"/posts/asm/:0:0","tags":["汇编"],"title":"汇编入门速记","uri":"/posts/asm/"},{"categories":["Anecdotes"],"content":"晦涩的社会心理现象，别具一格的黏性表达。 ","date":"2021-06-20","objectID":"/posts/anecdote/:0:0","tags":["思辨"],"title":"有趣的经济学/心理学效应","uri":"/posts/anecdote/"},{"categories":["Anecdotes"],"content":"格雷欣法则（劣币驱逐良币） 含义：泛指价值不高的东西会把价值较高的东西挤出流通领域。 起源：古时候，因为铸造货币工艺的差别很大，人们就倾向于将那些足值的“良币”收藏起来，并试图将那些成色差的“劣币”转让给他人，这样市场上就同时流通着劣币和良币，且劣币得不到有效地制止和惩罚，如此循环，良币就会被驱逐出市场，质量差的货币反而在市场上流通了。 示例：当你的钱包里既有新钱又有旧钱时，你总是倾向于把那张破旧的先花出去。久而久之，流通中的货币越来越破旧，新钱却没有花出去，仍然呆在钱包里。 ","date":"2021-06-20","objectID":"/posts/anecdote/:1:0","tags":["思辨"],"title":"有趣的经济学/心理学效应","uri":"/posts/anecdote/"},{"categories":["Anecdotes"],"content":"马太效应 马太效应\" 马太效应 凡有的，还要加给他，叫他有余；凡没有的，连他所有的也要夺去 —— 太：13·12 含义：只要获得了每一点的成功，就会产生累积优势，使之拥有更大的机会获得更卓越的成就。 起源：有一个贵胄往远方去，要得国回来。便叫了他的十个仆人来，交给他们十锭银子（锭原文作弥拿，一弥拿约银十两），说，你们去作生意，直等我回来。他本国的人却恨他，打发使者随后去说，我们不愿意这个人作我们的王。他既得国回来，就吩咐叫那领银子的仆人来，要知道他们作生意赚了多少。头一个上来说，主阿，你的一锭银子，已经赚了十锭。主人说，好良善的仆人。你既在最小的事上有忠心，可以有权柄管十座城。第二个来说，主阿，你的一锭银子，已经赚了五锭。主人说，你也可以管五座城。又有一个来说，主阿，看哪，你的一锭银子在这里，我把他包在手巾里存着。我原是怕你，因为你是严厉的人。没有放下的还要去拿，没有种下的还要去收。主人对他说，你这恶仆，我要凭你的口，定你的罪。你既知道我是严厉的人，没有放下的还要去拿，没有种下的还要去收。为什么不把我的银子交给银行，等我来的时候，连本带利都可以要回来呢？就对旁边站着的人说，夺过他这一锭来，给那有十锭的。他们说，主阿，他已经有十锭了。主人说，我告诉你们，凡有的，还要加给他。没有的，连他所有的，也要夺过来。——路：19·12-26 示例：强者愈强弱者越弱，贫富差距大，赢家通吃。 ","date":"2021-06-20","objectID":"/posts/anecdote/:2:0","tags":["思辨"],"title":"有趣的经济学/心理学效应","uri":"/posts/anecdote/"},{"categories":["Anecdotes"],"content":"幸存者偏差 幸存者偏差\" 幸存者偏差 含义：当取得资讯的渠道，仅来自于幸存者时，此资讯可能会与实际情况存在偏差。 起源：1941年,第二次世界大战中，美国哥伦比亚大学统计学沃德教授应军方要求，利用其在统计方面的专业知识来提供关于《飞机应该如何加强防护，才能降低被炮火击落的几率》的相关建议。沃德教授针对联军的轰炸机遭受攻击后返回营地的轰炸机数据，进行研究后发现：机翼是最容易被击中的位置,机尾则是最少被击中的位置。沃德教授的结论是“我们应该强化机尾的防护”，而军方指挥官认为“应该加强机翼的防护，因为这是最容易被击中的位置”。教授认为： 统计的样本，只涵盖平安返回的轰炸机； 被多次击中机翼的轰炸机，似乎还是能够安全返航； 并非是机尾不易被击中，而是因为机尾被击中的飞机早已无法返航，寥寥几架返航的飞机都依赖引擎尚好。 示例：邻家小孩啥都比你强；炒股的大部分人赚得盆满钵满；SLA计算工具的可靠性（当系统由于断电等缘故大范围崩溃时，SLA计算工具也不work了，此时的不可用时间未被统计到）。 ","date":"2021-06-20","objectID":"/posts/anecdote/:3:0","tags":["思辨"],"title":"有趣的经济学/心理学效应","uri":"/posts/anecdote/"},{"categories":["Anecdotes"],"content":"路径依赖 马屁股决定火箭推进器\" 马屁股决定火箭推进器 含义：人类社会中的技术演进或制度变迁均有类似于物理学中的惯性，即一旦进入某一路径（无论是“好”还是“坏”）就可能对这种路径产生依赖，并在此基础上进行自我强化，初始时的细微差异会被放大，从而不成比例地引发了后来的境况，即过去的决定对未来产生较强的影响。 示例1——键盘的构造：肖尔斯发明的打字机，首先是按字母顺序排列，后来发现，经过专业训练的打字员正常击键时老是出故障，因为打字员打得太快，使得支撑键盘的机械杆相互碰撞产生故障，反而严重影响了打字速度。有一位工程师提议，打字机绞键的原因，一方面是字键的弹回速度慢，另一方面也是打字员的击键速度太快了，由于当时的机械工艺水平，无法再提高字键弹回的速度。他想，为什么不想法降低打字员的击键速度呢？而降低打字员的击键速度，最简单的方法给打字制造难度，打乱26个字母的排列顺序，把较常用的字母摆在较笨拙的手指下。比如，字母“O”是英语中第三个使用频率最高的字母，但却把它放在右手的无名指下；字母“S”和“A”，也是使用频率很高的字母，却被交给了最笨拙的左手无名指和小指来击打。同样理由，使用频率较低的“V”“J”“U”等字母却由最灵活的食指来负责。这样，这种毫无规律可寻专门为增加打字难度的打字机键盘设计出来了，并且逐渐定型下来。后来，即使制造工艺的发展，字键的弹回的速度远大于打字员的击键速度，但是键盘字母顺序却无法改动，这种“QWERTY”式组合的键盘就一直沿用至今。后来也有许多人发明了更方便科学的键盘，但是一直没有推广开来。 示例2——火箭推进器与马屁股：如果火箭需要运输更大的重量，就要直径更大、箭体更长，但火箭的推进器直径，美国国家的标准是四英尺八点五英寸，这个尺寸的选定的依赖链如下： 当时火箭推进器，是通过火车来的运输的，火箭推进器的大小由火车的两轨之间的距离决定； 火车轨道的距离参照英国老路上的辙迹； 辙迹间距是罗马战车的两个轮子之间的距离； 战车轮子间据依赖于拉动战车两匹马的屁股宽度。 ","date":"2021-06-20","objectID":"/posts/anecdote/:4:0","tags":["思辨"],"title":"有趣的经济学/心理学效应","uri":"/posts/anecdote/"},{"categories":["Anecdotes"],"content":"肥皂水效应 含义：是将批评夹在赞美中，将对他人的批评夹裹在前后肯定的话语之中，减少批评的负面效应，使被批评者愉快地接受对自己的批评。 起源：1923年，约翰·卡尔文·柯立芝成为美国总统，他有一位漂亮的女秘书，人虽长得很好，但工作中却常因粗心而出错。一天早晨，柯立芝看见秘书走进办公室，便对她说：“今天你穿的这身衣服真漂亮，正适合你这样漂亮的小姐。”这句话出自柯立芝口中，简直让女秘书受宠若惊。柯立芝接着说：“但也不要骄傲，我相信你同样能把公文处理得像你一样漂亮的。”果然从那天起，女秘书在处理公文时很少出错了。 解释：你见过理发师给人刮胡子吗？他要先给人涂些肥皂水，为什么呀，就是为了刮起来使人不觉痛。 ","date":"2021-06-20","objectID":"/posts/anecdote/:5:0","tags":["思辨"],"title":"有趣的经济学/心理学效应","uri":"/posts/anecdote/"},{"categories":["Anecdotes"],"content":"旁观者效应 旁观者效应\" 旁观者效应 含义：在紧急情况下，一个人在有其他人在场时，出手帮助之机会降低，援助的几率与旁观者人数负相关。换句话说，旁观者数量越多，他们当中任何一人进行援助之机会越低。 起源：1964年，纽约昆斯区，28岁的Kitty Genovese在经受了长达35分钟的性侵犯后最终被谋杀致死，共有38个本地区人性正常的居民经过，但没有一人提供帮助。 示例：项目中如果将责任明确到个人时，其可以完成的很好，但是如果没有明确的责任划分，项目往往会停滞不前，所谓三个和尚没水吃。比如明知陈旧代码存在问题，我们总是在假设别人会来修补这些问题。如果这些问题出现在我们的代码库中，我们很可能对之无动于衷，因为“这事儿跟我无关”。程序员对这样的问题通常的反应：这是别的程序员造成的问题，我才不管呢。这种“这事儿跟我无关”的态度很流行。 ","date":"2021-06-20","objectID":"/posts/anecdote/:6:0","tags":["思辨"],"title":"有趣的经济学/心理学效应","uri":"/posts/anecdote/"},{"categories":["Anecdotes"],"content":"拆屋效应 含义：你想让某人达成你的一个对你有利要求，如果你直接说出与自己的要求，那么你的要求也许会被对方压制下去，最后形成了一个“折衷”的结果。这个提议实际上没有达到你预期的效果。但是，如果你提一个相对自己想要的结果更大的要求，那么对方也会调和，但是你可以步步退让，最后退到自己的要求上，就能达到效果。其最大的好处在于让人无法拒绝你 起源：鲁迅（周树人）在1927年所写的《无声的中国》中写道：“中国人的性情总是喜欢调和、折中的，譬如你说，这屋子太暗，说在这里开一个天窗，大家一定是不允许的。但如果你主张拆掉屋顶，他们就会来调和，愿意开天窗了。 示例：《左耳听风》中提到 当你面对做不到的需求时，给出另一个你可以做到的方案，而不是把对方的方案直接回绝掉 。 当你面对过于复杂的需求时，我不说我不能完全满足你，但我说我可以部分满足你 。 我不能说不，但是我要有条件地说是。 ","date":"2021-06-20","objectID":"/posts/anecdote/:7:0","tags":["思辨"],"title":"有趣的经济学/心理学效应","uri":"/posts/anecdote/"},{"categories":["Anecdotes"],"content":"棘轮效应 棘轮(ratchet)\" 棘轮(ratchet) 由俭入奢易 由奢入俭难 ——司马光《训俭示康》 含义：人的消费习惯形成之后有不可逆性，即易于向上调整，而难于向下调整。尤其是在短期内消费是不可逆的，其习惯效应较大。这种习惯效应，使消费取决于相对收入，即相对于自己过去的高峰收入。消费者易于随收入的提高增加消费，但不易于收入降低而减少消费，以致产生有正截距的短期消费函数。 示例：一般来讲，领导在年初为下属设置业绩目标，在年底通过一些关键指标（KPI）来度量下属的表现。下属的表现主要取决于其能力和努力程度。这两个都不易被领导所见。领导往往根据对下属能力和努力程度的预估为其设置业绩目标。为提供激励，往往许诺超额重奖。下属为了争取奖金，加倍努力。年底业绩超额，奖金兑现，领导下属皆大欢喜。来年开工，领导心想，去年业绩这么好，可见这下属能力不一般，今年他的业绩目标就调高一点。面对更高的业绩要求，下属发现同样的努力程度今年刚好达标，想拿奖金，只能比去年更努力。下属今年的优异表现推高了领导来年对其的业绩期望，导致下属为拿奖金所付出的努力越来越高，这就是职场中的棘轮效应。给定这个现象，聪明的下属努力时，不仅考虑它对今年奖金的影响，还考虑它对明年领导期望的影响。有了动态的眼光，才能用最少的努力换来最大的收获。 ","date":"2021-06-20","objectID":"/posts/anecdote/:8:0","tags":["思辨"],"title":"有趣的经济学/心理学效应","uri":"/posts/anecdote/"},{"categories":["Anecdotes"],"content":"眼镜蛇效应 含义：指针对某问题的解决方案，反而使得该问题恶化。 起源：英国政府计划要减少眼镜蛇的数量，因而颁布法令说每打死一条眼镜蛇都可以领取赏金。然而印度人为了赏金反而开始养殖眼镜蛇。当英国政府意识到这种情况而取消赏金后，养殖蛇的人把蛇都放了；放出去的蛇继而大量繁殖，结果眼镜蛇族群数量不减反增。 ","date":"2021-06-20","objectID":"/posts/anecdote/:9:0","tags":["思辨"],"title":"有趣的经济学/心理学效应","uri":"/posts/anecdote/"},{"categories":["Anecdotes"],"content":"墨菲定律 面包落地的时候，永远是抹黃油的一面着地 含义：指的是任何一个事件，只要具有大于零的几率，就可确定它终有一天会发生。墨菲定律的原句是：如果有两种或两种以上的方式去做某件事情，而其中一种选择方式将导致灾难，则必定有人会做出这种选择，常解释为担心的事情总会发生，凡是会出错的事一定会出错。 示例：一粒米掉入轮盘上任意一点的概率是0，但落在轮盘上某点是个必然事件。 ","date":"2021-06-20","objectID":"/posts/anecdote/:10:0","tags":["思辨"],"title":"有趣的经济学/心理学效应","uri":"/posts/anecdote/"},{"categories":["Anecdotes"],"content":"羊群效应 含义：指盲目从众跟风。 起源：在一个竞争非常激烈的行业上，而且这个行业上有一个领先者（领头羊）占据了主要的注意力，那么整个羊群就会不断摹仿这个领头羊的一举一动，领头羊到哪里去吃草，其它的羊也去哪里吃草。 他用：zookeeper作为分布式锁，大量客户端注册监听事件抢锁，当锁被释放以后，会向所有的监听器发送消息，引起羊群效应。此处的羊群效应含义有所不同，指代信息风暴。 ","date":"2021-06-20","objectID":"/posts/anecdote/:11:0","tags":["思辨"],"title":"有趣的经济学/心理学效应","uri":"/posts/anecdote/"},{"categories":["Anecdotes"],"content":"皮格马利翁效应 含义：指人在被赋予更高期望以后，他们会表现的更好的一种现象。 起源：希腊神话故事里面的一位名为皮格马利翁的雕刻家，他爱上了自己用象牙雕刻出来的女神雕像，由于他每天对着雕像说话，最后那座女神雕像变成一位真正的女神。 示例：内心常常带着负面期望的人们将会失败；而内心常常带着正面期望的人们将会成功。 ","date":"2021-06-20","objectID":"/posts/anecdote/:12:0","tags":["思辨"],"title":"有趣的经济学/心理学效应","uri":"/posts/anecdote/"},{"categories":["Anecdotes"],"content":"海格力斯效应 以彼之道，还施彼身 含义：人与人之间或群体之间存在的冤冤相报、致使仇恨越来越深的社会心理效应。 起源：希腊神话故事中有位英雄大力士，叫海格力斯，一天，他走在坎坷不平的路上，看见脚边有个像鼓起的袋子样的东西，很难看，海格力斯便踩了那东西一脚。谁知那东西不但没被海格力斯一脚踩破，反而膨胀起来，并成倍成倍地加大，这激怒了英雄海格力斯。他顺手操起—根碗口粗的木棒砸那个怪东西，好家伙，那东西竟膨胀到把路也堵死了。海格力斯奈何不了他，正在纳闷，一位圣者走到海格力斯跟前对他说：“朋友．快别动它了，忘了它，离它远去吧。它叫仇恨袋，你不惹它，它便会小如当初；你若侵犯它，它就会膨胀起来与你敌对到底。”仇恨正如海格力斯所遇到的这个袋子，开始很小，如果你忽略它，矛盾化解，它会自然消失；如果你与它过不去，加恨于它，它会加倍地报复。 ","date":"2021-06-20","objectID":"/posts/anecdote/:13:0","tags":["思辨"],"title":"有趣的经济学/心理学效应","uri":"/posts/anecdote/"},{"categories":["Anecdotes"],"content":"破窗效应 破窗效应\" 破窗效应 含义：环境中的不良现象如果被放任存在，会诱使人们仿效，甚至变本加厉。 起源：以一幢有少许破窗的建筑为例，如果那些窗不被修理好，可能将会有破坏者破坏更多的窗户。面对“第一扇破窗”，我们常常自我暗示：窗是可以被打破的，没有惩罚。这样想着，不知不觉，我们就成了第二双手、第三双手……“环境早就脏了，我扔的这点儿垃圾根本起不到关键性作用”、“反正也不是我先这么做的”，不少人会这样为自己辩解。 示例： 一面墙，如果出现一些涂鸦没有被清洗掉，很快的，墙上就布满了乱七八糟、不堪入目的东西； 一条人行道有些许纸屑，不久后就会有更多垃圾，最终人们会视若理所当然地将垃圾顺手丢弃在地上； 出轨只有零次和无数次。 ","date":"2021-06-20","objectID":"/posts/anecdote/:14:0","tags":["思辨"],"title":"有趣的经济学/心理学效应","uri":"/posts/anecdote/"},{"categories":["Anecdotes"],"content":"刻板印象 你以为你以为的就是你以为的吗？ 含义：人类对于某些特定类型人、事或物的一种概括的看法，看法可能是来自于同一类型的人事物之中的某一个个体给旁人的观感。 类比：晕轮效应是指人们对他人的认知首先根据初步印象，然后再从这个印象推论出认知对象的其他特质，以点概面（由局部到整体）。 ","date":"2021-06-20","objectID":"/posts/anecdote/:15:0","tags":["思辨"],"title":"有趣的经济学/心理学效应","uri":"/posts/anecdote/"},{"categories":["Anecdotes"],"content":"边际效用递减 边际效用递减\" 边际效用递减 含义：在其他商品的消费数量保持不变的条件下，当一个人连续消费某种物品时，随着所消费的该物品的数量增加，其总效用（total utility）虽然相应增加，但物品的边际效用（marginalutility），即每消费一个单位的该物品，其所带来的效用的增加量）有递减的趋势。 起源：一个人右手举着300克的砝码，这时在其左手上放305克的砝码，他并不会觉得有多少差别，直到左手砝码的重量加至306克时才会觉得有些重;如果右手举着600克，这时左手上的重量要达到612克才能感觉到重了。也就是说，原来的砝码越重，后来就必须加更大的量才能感觉到差别（贝勃定律）。 示例： 当人经历强烈的刺激后，再施予的刺激对他（她）来说也就变得微不足道。就心理感受来说，第一次大刺激能冲淡第二次的小刺激。比如，原本一元钱的报纸变成了十元一份，你定会感到无法接受；而原本10000元的电脑涨了100元，你一定不会有什么大的反应。 你很喜欢巧克力，在吃第一块巧克力的时候会获得一种味蕾和精神上的满足感，这就是经济学家所说的“效用”。但是随着你越吃越多，你所获得的满足感会变得不那么强烈渐渐趋于平淡。第五块巧克力带给你的满足感远不及第一块，吃到第十块的时候，你甚至感到厌倦，更别说第十五块第二十块了。新增加的每一块糖所带来的满足感就是边际效用，“边际”的意思是事物的边缘，巧克力效用的边际是最后一块巧克力的效用。 ","date":"2021-06-20","objectID":"/posts/anecdote/:16:0","tags":["思辨"],"title":"有趣的经济学/心理学效应","uri":"/posts/anecdote/"},{"categories":["Anecdotes"],"content":"帕累托优化 婚前状态\" 婚前状态 婚后状态(预想)\" 婚后状态(预想) 含义：在一个系统中，存在一种分配状态，在不损失所有人的利益下，至少提升一人利益，此分配方向称为帕累托优化。在不损失所有人的利益下，无法找到一种策略使得至少一人利益提升时，系统达到帕累托最优。 本质：多目标优化的资源分配问题 ","date":"2021-06-20","objectID":"/posts/anecdote/:17:0","tags":["思辨"],"title":"有趣的经济学/心理学效应","uri":"/posts/anecdote/"},{"categories":["Anecdotes"],"content":"损失厌恶 损失厌恶\" 损失厌恶 含义：人们面对同样数量的收益和损失时，认为损失更加令他们难以忍受。损失带来的负效用为收益正效用的2至2.5倍。 实验 实验团体先行持有1000单位的现金。在此基础上做出选择。 A.50%的概率将持有的现金增加为2000。 B.100%的概率将持有的现金增加为1500。 此实验中，被实验团体的16%选择了A，84%选择了B。 同实验团体先行持有2000单位的现金。在此基础上做出选择。 C.50%的概率损失1000单位现金。 D.100%的概率损失500单位现金。 此实验中，同实验团体的69%选择了C，31%选择了D。 ","date":"2021-06-20","objectID":"/posts/anecdote/:18:0","tags":["思辨"],"title":"有趣的经济学/心理学效应","uri":"/posts/anecdote/"},{"categories":["Anecdotes"],"content":"沉没成本 含义：指发生在过去，但对当前决策无关的成本，来自于对过去投入的执着，以此来说服自己。也是作用在人的心理因素层面，心理成本意识大过本身付出的经济成本。 示例：即便本行干不下去也不愿意转行；即便没有爱了也不愿意分手；来都来了… ","date":"2021-06-20","objectID":"/posts/anecdote/:19:0","tags":["思辨"],"title":"有趣的经济学/心理学效应","uri":"/posts/anecdote/"},{"categories":["读书笔记"],"content":"一本让创意有粘性的好书","date":"2021-06-19","objectID":"/posts/stickiness/","tags":["思辨"],"title":"《粘住》有感","uri":"/posts/stickiness/"},{"categories":["读书笔记"],"content":"让创意具有黏性，打破知识的诅咒。 ","date":"2021-06-19","objectID":"/posts/stickiness/:0:0","tags":["思辨"],"title":"《粘住》有感","uri":"/posts/stickiness/"},{"categories":["读书笔记"],"content":"知识的诅咒 一旦我们知道某样东西，我们就会发现很难想象不知道它是什么样子。我们的知识诅咒了我们，对于我们来说，同别人分享我们的知识变得很困难，因为我们不易重造我们听众的心境。 ","date":"2021-06-19","objectID":"/posts/stickiness/:1:0","tags":["思辨"],"title":"《粘住》有感","uri":"/posts/stickiness/"},{"categories":["读书笔记"],"content":"黏性创意的六大原则 ","date":"2021-06-19","objectID":"/posts/stickiness/:2:0","tags":["思辨"],"title":"《粘住》有感","uri":"/posts/stickiness/"},{"categories":["读书笔记"],"content":"简约 寻找核心，从中提炼，切忌淹没导语。 谚语：从丰富的经验中提炼出的短句。 通过类比化繁为简。 ","date":"2021-06-19","objectID":"/posts/stickiness/:2:1","tags":["思辨"],"title":"《粘住》有感","uri":"/posts/stickiness/"},{"categories":["读书笔记"],"content":"意外 吸引注意力，并使注意力持久。 缺口理论：知识的缺口产生好奇心。 ","date":"2021-06-19","objectID":"/posts/stickiness/:2:2","tags":["思辨"],"title":"《粘住》有感","uri":"/posts/stickiness/"},{"categories":["读书笔记"],"content":"具体 “具体“的辨别：能够凭感觉审视某样东西。 例子，寓言，故事是具体的，便于理解，易于流传。 语言经常是抽象的，但生活不是。 ","date":"2021-06-19","objectID":"/posts/stickiness/:2:3","tags":["思辨"],"title":"《粘住》有感","uri":"/posts/stickiness/"},{"categories":["读书笔记"],"content":"可信 细节与数据会增强事物的可信度。 可获得性偏差：直觉往往会由于一些共同的偏差造成缺陷。 ","date":"2021-06-19","objectID":"/posts/stickiness/:2:4","tags":["思辨"],"title":"《粘住》有感","uri":"/posts/stickiness/"},{"categories":["读书笔记"],"content":"情感 当我面对人群的时候，我束手无策；但如果面对的只是一个人，我便有了办法。 ——特蕾莎修女 理性会抑制情感的自然流露，感性促使人们产生共情。 ","date":"2021-06-19","objectID":"/posts/stickiness/:2:5","tags":["思辨"],"title":"《粘住》有感","uri":"/posts/stickiness/"},{"categories":["读书笔记"],"content":"故事 宏观定义：能在脑海中产生画面的事物。 故事以更少的直觉，更多戏剧化的方式让我们参与其中。 故事的魔力就在于如果自己的某些经历与故事中的主人公相似，那么就会在大脑中产生深深的共鸣，依靠着这种共鸣，故事就可以产生巨大的传播力。 ","date":"2021-06-19","objectID":"/posts/stickiness/:2:6","tags":["思辨"],"title":"《粘住》有感","uri":"/posts/stickiness/"},{"categories":["读书笔记"],"content":"书评扩展 ","date":"2021-06-19","objectID":"/posts/stickiness/:3:0","tags":["思辨"],"title":"《粘住》有感","uri":"/posts/stickiness/"}]